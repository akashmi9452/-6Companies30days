*****Question 1: Print Anagrams Together*****

class Solution:
    def Anagrams(self, words, n):
        '''
        words: list of word
        n:      no of words
        return : list of group of anagram {list will be sorted in driver code (not word in grp)}
        '''
        
        mp = {}
        for word in words:
            st = ''.join(sorted(word))
            if st in mp:
                mp[st].append(word)
            else:
                mp[st] = [word]
        return mp.values()
        

*****Question 2: Overlapping rectangles*****

class Solution:
    def doOverlap(self, l1, r1, l2, r2):
        #if the lower edge of one rectangle lies above upper edge of other rectangle
        if l1[1] < r2[1] or r1[1] > l2[1]:
            return 0
            
        #if the left edge of one rectangle lies after right edge of other rectangle
        if l1[0] > r2[0] or r1[0] < l2[0]:
            return 0
            
        #else the rectangles overlap
        return 1


*****Question 3: Count the subarrays having product less than k*****

class Solution:
    def countSubArrayProductLessThanK(self, a, n, k):
        ans = 0
        left = 0
        prod = 1
        
        for right in range(n):
            prod *= a[right]
            while left < right and prod >= k:
                prod /= a[left]
                left += 1
            if prod < k:
                ans += right-left+1
        return ans


*****Question 4: Run Length Encoding *****

def encode(arr):
    if not arr:
        return ''
    ans = ''
    temp = arr[0]
    count = 1
    for i in range(1, len(arr)):
        if arr[i] != arr[i-1]:
            ans += temp + str(count)
            temp = arr[i]
            count = 1
        else:
            count += 1
    ans += arr[-1]+str(count)
    return ans


*****Question 5: Ugly Numbers *****

class Solution:
	def getNthUglyNo(self,n):
		dp = [1]*(n+1)
		p2 = p3 = p5 = 1
		
		for i in range(2, n+1):
		    f1 = 2*dp[p2]
		    f2 = 3*dp[p3]
		    f3 = 5*dp[p5]
		    
		    dp[i] = min(f1,f2,f3)
		    
		    if dp[i] == f1:
		        p2 += 1
		    if dp[i] == f2:
		        p3 += 1
		    if dp[i] == f3:
		        p5 += 1
		        
	    return dp[n]


*****Question 6: Greatest Common Divisor of Strings *****

class Solution:
    def gcdOfStrings(self, str1: str, str2: str) -> str:
        if len(str1) < len(str2):
            str1, str2 = str2, str1
        n1 = len(str1)
        n2 = len(str2)
        i = n2
        while i > 0:
            if n1 % i == 0 and n2 % i == 0:
                if str2[0:i] * (n2//i) == str2 and str2[0:i] * (n1//i) == str1:
                    return(str2[0:i])
            i -= 1
        return '' 
        
        
*****Question 7: Find position of Mth item *****        

class Solution:
    def findPosition(self, n , m , k):
        if (m <= n - k + 1):
            return m + k - 1
    
        m = m - (n - k + 1)

        if(m % n == 0):
            return n
        else:
            return m % n


*****Question 8: Total Decoding Messages *****        

